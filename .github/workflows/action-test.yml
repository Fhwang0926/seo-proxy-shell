name: Manually Release Previous Tag

on: 
  push:
    branches: [ 'master', 'main' ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Repo Branch/Tag'
        default: 'main'
        type: 'string'
        required: true
jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with: 
          ref: ${{ inputs.tag }}
      - name: Prepare
        id: prep
        run: |
          # DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/${GITHUB_REPOSITORY#*/}
          DOCKER_IMAGE=${{ secrets.DOCKER_REGISTRY }}/seo/seo-proxy-shell
          # ${GITHUB_REPOSITORY#*/}
          # :${{ inputs.tag }}

          VERSION=${{ inputs.tag }}
          VERSION="${VERSION//v}"
          TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}"

          # If the VERSION looks like a version number, assume that
          # this is the most recent version of the image and also
          # tag it 'latest'.
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}"
          fi
          
          echo  ${{ steps.prep.outputs.tags }}
          echo  ${TAGS}
          echo  ${DOCKER_IMAGE}


          # Set output parameters.
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      
      - name: set cert
        run: |
          bash app/cert.sh
          echo ${{ steps.prep.outputs.tags }}
        

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/ppc64le
          push: true
          # tags: ${{ steps.prep.outputs.tags }}
          tags: ${{ steps.prep.outputs.docker_image }}
      
      #- name: Push the tagged Docker image
      #  run: docker push harbor.donghwa.dev:4443/seo/${GITHUB_REPOSITORY#*/}:latest\
  deploy:
    # The type of runner that the job will run on
    needs: docker
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a single command using the runners shell
      - name: Webhook
        run: curl -s -d "payload={\"feel\":\"WTF\"}" "${{ secrets.WEB_HOOK_TARGET }}"

      - uses: actions/checkout@v2
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
#           SLACK_ICON: https://github.com/rtCamp.png?size=48 # later add favicon
          SLACK_TITLE: 'deployed new version for seo project'
          SLACK_MESSAGE: ${{ github.event.head_commit.title }} ${{ github.event.head_commit.message }}
          SLACK_USERNAME: MySNS-bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  apply-if-failed:
    runs-on: ubuntu-latest
    needs: [docker, deploy]
    if: always() && (needs.apply.result == 'failure')
    steps:
      - name: WEBHOOK apply was failed
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
        run: |
          echo "$NEEDS_CONTEXT"
      - name: Slack Notification Failed
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: '#FF2D00' # or a specific color like 'good' or '#ff00ff'
#           SLACK_ICON: https://github.com/rtCamp.png?size=48 # later add favicon
          SLACK_TITLE: 'github cd/ci was failed'
          SLACK_MESSAGE: ${{ github.event.head_commit.title }} ${{ github.event.head_commit.message }}
          SLACK_USERNAME: security-bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}  
    
